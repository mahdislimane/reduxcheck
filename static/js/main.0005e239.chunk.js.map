{"version":3,"sources":["logo.svg","components/Counter.js","action/actions.js","action/types.js","App.js","reducer/conterReducer.js","reducer/index.js","store.js","serviceWorker.js","index.js"],"names":["module","exports","connect","state","counter","CounterReducer","dispatch","add","type","decrement","props","className","style","border","padding","marginTop","Button","variant","onClick","App","initialState","action","combineReducers","Store","createStore","rootReducer","applyMiddleware","store","next","console","log","getState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qJAAAA,EAAOC,QAAU,IAA0B,kC,yICiC3C,IAWeC,eAXS,SAACC,GACvB,MAAO,CACLC,QAASD,EAAME,mBAGQ,SAACC,GAC1B,MAAO,CACLC,IAAK,kBAAMD,ECtCN,CACLE,KCHe,SFyCfC,UAAW,kBAAMH,EClCZ,CACLE,KCPqB,kBF2CVN,EAvCf,SAAiBQ,GACf,OACE,yBAAKC,UAAU,uBACb,yBAAKA,UAAU,UACf,yBACEA,UAAU,QACVC,MAAO,CACLC,OAAQ,iBACRC,QAAS,OACTC,UAAW,UAGb,wBAAIJ,UAAU,UAAUD,EAAMN,QAAQA,SACtC,kBAACY,EAAA,EAAD,CACEC,QAAQ,YACRN,UAAU,QACVO,QAAS,kBAAMR,EAAMD,cAHvB,KAOA,kBAACO,EAAA,EAAD,CAAQL,UAAU,QAAQO,QAAS,kBAAMR,EAAMH,QAA/C,MAIF,yBAAKI,UAAU,cGhBNQ,MARf,WACE,OACE,yBAAKR,UAAU,OACb,kBAAC,EAAD,Q,eCPAS,EAAe,CAAEhB,QAAS,GAWjBC,EAVQ,WAAmC,IAAlCF,EAAiC,uDAAzBiB,EAAcC,EAAW,uCACvD,OAAQA,EAAOb,MACb,IFJe,MEKb,OAAO,eAAKL,EAAZ,CAAmBC,QAASD,EAAMC,QAAU,IAC9C,IFLqB,YEMnB,OAAO,eAAKD,EAAZ,CAAmBC,QAASD,EAAMC,QAAU,IAC9C,QACE,OAAOD,ICPEmB,cAAgB,CAAEjB,mBCSlBkB,EAFDC,YAAYC,EAAaC,aANrB,SAACC,GAAD,OAAW,SAACC,GAAD,OAAU,SAACP,GACtCQ,QAAQC,IAAIT,EAAQM,EAAMI,YAC1BH,EAAKP,GACLQ,QAAQC,IAAIT,EAAQM,EAAMI,kBCMRC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUZ,MAAOJ,GACf,kBAAC,EAAD,QAGJiB,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpB,QAAQoB,MAAMA,EAAMC,c","file":"static/js/main.0005e239.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport { connect } from \"react-redux\";\r\nimport { decrement, add } from \"../action/actions\";\r\nfunction Counter(props) {\r\n  return (\r\n    <div className=\"container-fluid row\">\r\n      <div className=\"col-4\"></div>\r\n      <div\r\n        className=\"col-4\"\r\n        style={{\r\n          border: \"solid 1px blue\",\r\n          padding: \"50px\",\r\n          marginTop: \"100px\",\r\n        }}\r\n      >\r\n        <h3 className=\"col-12\">{props.counter.counter}</h3>\r\n        <Button\r\n          variant=\"secondary\"\r\n          className=\"col-6\"\r\n          onClick={() => props.decrement()}\r\n        >\r\n          -\r\n        </Button>\r\n        <Button className=\"col-6\" onClick={() => props.add()}>\r\n          +\r\n        </Button>\r\n      </div>\r\n      <div className=\"col-4\"></div>\r\n    </div>\r\n  );\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    counter: state.CounterReducer,\r\n  };\r\n};\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    add: () => dispatch(add()),\r\n    decrement: () => dispatch(decrement()),\r\n  };\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Counter);\r\n","import { ADD, DECREMENT } from \"./types\";\r\nexport const add = () => {\r\n  return {\r\n    type: ADD,\r\n  };\r\n};\r\nexport const decrement = () => {\r\n  return {\r\n    type: DECREMENT,\r\n  };\r\n};\r\n","export const ADD = \"ADD\";\r\nexport const DECREMENT = \"DECREMENT\";\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Counter from \"./components/Counter\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Counter />\n    </div>\n  );\n}\n\nexport default App;\n","import { ADD, DECREMENT } from \"../action/types\";\r\nconst initialState = { counter: 0 };\r\nconst CounterReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case ADD:\r\n      return { ...state, counter: state.counter + 1 };\r\n    case DECREMENT:\r\n      return { ...state, counter: state.counter - 1 };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport default CounterReducer;\r\n","import { combineReducers } from \"redux\";\r\nimport CounterReducer from \"./conterReducer\";\r\nexport default combineReducers({ CounterReducer });\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport rootReducer from \"./reducer\";\r\n\r\nconst something = (store) => (next) => (action) => {\r\n  console.log(action, store.getState());\r\n  next(action);\r\n  console.log(action, store.getState());\r\n};\r\n\r\nconst Store = createStore(rootReducer, applyMiddleware(something));\r\n\r\nexport default Store;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport Store from \"./store\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={Store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}